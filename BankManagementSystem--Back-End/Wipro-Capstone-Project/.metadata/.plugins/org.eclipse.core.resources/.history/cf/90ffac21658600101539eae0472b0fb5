package com.bank.payment.service;

import org.springframework.stereotype.Service;

import com.bank.payment.dto.NotificationDTO;
import com.bank.payment.dto.PaymentRequest;
import com.bank.payment.entity.Payment;
import com.bank.payment.feign.AccountFeignClient;
import com.bank.payment.feign.NotificationFeignClient;
import com.bank.payment.repository.PaymentRepository;

@Service
public class PaymentServiceImpl implements PaymentService {

    private final AccountFeignClient accountClient;
    private final NotificationFeignClient notificationClient;
    private final PaymentRepository repository;

    public PaymentServiceImpl(AccountFeignClient accountClient,
                              NotificationFeignClient notificationClient,
                              PaymentRepository repository) {
        this.accountClient = accountClient;
        this.notificationClient = notificationClient;
        this.repository = repository;
    }

    @Override
    public Payment doPayment(PaymentRequest request) {
        Payment payment = new Payment(
                request.getSenderAccount(),
                request.getReceiverAccount(),
                request.getAmount(),
                "FAILED"
        );

        try {
            accountClient.debitAccount(request.getSenderAccount(), request.getAmount());
            accountClient.creditAccount(request.getReceiverAccount(), request.getAmount());

            payment.setStatus("SUCCESS");
            repository.save(payment);

            // notify sender
            notificationClient.sendNotification(new NotificationDTO(
                    request.getSenderAccount(),
                    "Payment Sent",
                    "You sent " + request.getAmount() + " to " + request.getReceiverAccount()
            ));

            // notify receiver
            notificationClient.sendNotification(new NotificationDTO(
                    request.getReceiverAccount(),
                    "Payment Received",
                    "You received " + request.getAmount() + " from " + request.getSenderAccount()
            ));

        } catch (Exception e) {
            payment.setStatus("FAILED");
            repository.save(payment);
        }
        return payment;
    }
}